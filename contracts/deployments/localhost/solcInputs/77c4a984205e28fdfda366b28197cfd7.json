{
  "language": "Solidity",
  "sources": {
    "contracts/LuckySeven.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity 0.7.0;\n\nimport \"./LuckySevenPRNG.sol\";\n\ncontract LuckySeven {\n    address public owner;\n    string public message = 'hey';\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'Not owner');\n        _;\n    }\n\n    function setOwner(address newOwner_) public onlyOwner {\n        owner = newOwner_;\n    }\n\n    function setMessage(string memory message_) public onlyOwner {\n        message = message_;\n    }\n}\n"
    },
    "contracts/LuckySevenPRNG.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.0;\n\n/**\n * @title LuckySeven\n * @dev LuckySevenPRNG is a library to execute the LuckySeven Pseudo Random Number Generator.\n */\nlibrary LuckySevenPRNG {\n    /**\n     * @dev Generates a pseudo random number on chain with super low gas cost (850 gas)\n     * @param b 1. numerator of the PRNG\n     * @param n 2. power of the 10 on the divisor of the PRNG\n     * @param mu 3. value for the oscillator to introduce entropy\n     * @param p 4. expands the number as 10^p\n     * @param i 5. chooses the starting position to start cutting the number\n     * @param j 6. to choose the length of the random number (digits from i position to left)\n     */\n\n    function prng(\n        uint256 b,\n        uint256 n,\n        uint256 mu,\n        uint256 p,\n        uint256 i,\n        uint256 j\n    ) public pure returns (uint256 O) {\n        assembly {\n            let L := exp(10, p) // 10^p\n            let U := mul(L, b) // 10^p * b\n            let C := exp(10, n) // 10^n\n            let K := sub(C, mu) // 10^n - mu\n            let Y := div(U, K) // (10^p * b)/(10^n - mu)\n            let S := exp(10, add(i, j)) // 10^(i+j)\n            let E := exp(10, i) // 10^i\n            let V := mod(Y, S) // Y % 10^(i+j)\n            let N := mod(Y, E) // Y % 10^i\n            let I := sub(V, N) // (Y % 10^(i+j)) / (Y % 10^i)\n            O := div(I, E)\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}