/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TickMathTest, TickMathTestInterface } from "../TickMathTest";

const _abi = [
  {
    inputs: [],
    name: "MAX_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getGasCostOfGetSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getGasCostOfGetTickAtSqrtRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getTickAtSqrtRatio",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b12806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80634f76c058146100675780636d2cc304146100c2578063986cfba3146100f6578063a7398eb414610151578063b0622f6714610196578063ee8847ff146101ee575b600080fd5b6100a96004803603602081101561007d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610222565b604051808260020b815260200191505060405180910390f35b6100ca610234565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101256004803603602081101561010c57600080fd5b81019080803560020b9060200190929190505050610250565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101806004803603602081101561016757600080fd5b81019080803560020b9060200190929190505050610262565b6040518082815260200191505060405180910390f35b6101d8600480360360208110156101ac57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061027d565b6040518082815260200191505060405180910390f35b6101f6610298565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600061022d826102a5565b9050919050565b600073fffd8963efd1fc6a506488495d951d5263988d26905090565b600061025b826106a1565b9050919050565b6000805a9050610271836106a1565b505a8103915050919050565b6000805a905061028c836102a5565b505a8103915050919050565b60006401000276a3905090565b60006401000276a373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1610158015610327575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16105b610399576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f520000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600060208373ffffffffffffffffffffffffffffffffffffffff16901b9050600081905060006fffffffffffffffffffffffffffffffff821160071b808217915082811c92505067ffffffffffffffff821160061b808217915082811c92505063ffffffff821160051b808217915082811c92505061ffff821160041b808217915082811c92505060ff821160031b808217915082811c925050600f821160021b808217915082811c9250506003821160011b808217915082811c925050600182118082179150506080811061047757607f810383901c9150610481565b80607f0383901b91505b6000604060808303901b9050828302607f1c92508260801c80603f1b8217915083811c935050828302607f1c92508260801c80603e1b8217915083811c935050828302607f1c92508260801c80603d1b8217915083811c935050828302607f1c92508260801c80603c1b8217915083811c935050828302607f1c92508260801c80603b1b8217915083811c935050828302607f1c92508260801c80603a1b8217915083811c935050828302607f1c92508260801c8060391b8217915083811c935050828302607f1c92508260801c8060381b8217915083811c935050828302607f1c92508260801c8060371b8217915083811c935050828302607f1c92508260801c8060361b8217915083811c935050828302607f1c92508260801c8060351b8217915083811c935050828302607f1c92508260801c8060341b8217915083811c935050828302607f1c92508260801c8060331b8217915083811c935050828302607f1c92508260801c8060321b82179150506000693627a301d71055774c8582029050600060806f028f6481ab7f045a5af012a19d003aaa8303901d9050600060806fdb2df09e81959a81455e260799a0632f8401901d90508060020b8260020b14610691578873ffffffffffffffffffffffffffffffffffffffff16610668826106a1565b73ffffffffffffffffffffffffffffffffffffffff16111561068a578161068c565b805b610693565b815b975050505050505050919050565b60008060008360020b126106b8578260020b6106c0565b8260020b6000035b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b81111561075e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f540000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008060018316141561078257700100000000000000000000000000000000610794565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600060028316146107ce5760806ffff97272373d413259a46990580e213a8202901c90505b600060048316146107f35760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b600060088316146108185760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b6000601083161461083d5760806fffcb9843d60f6159c9db58835c9266448202901c90505b600060208316146108625760806fff973b41fa98c081472e6896dfb254c08202901c90505b600060408316146108875760806fff2ea16466c96a3843ec78b326b528618202901c90505b600060808316146108ac5760806ffe5dee046a99a2a811c461f1969c30538202901c90505b60006101008316146108d25760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b60006102008316146108f85760806ff987a7253ac413176f2b074cf7815e548202901c90505b600061040083161461091e5760806ff3392b0822b70005940c7a398e4b70f38202901c90505b60006108008316146109445760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b600061100083161461096a5760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b60006120008316146109905760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b60006140008316146109b65760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b60006180008316146109dc5760806f31be135f97d08fd981231505542fcfa68202901c90505b600062010000831614610a035760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b600062020000831614610a295760806e5d6af8dedb81196699c329225ee6048202901c90505b600062040000831614610a4e5760806d2216e584f5fa1ea926041bedfe988202901c90505b600062080000831614610a715760806b048a170391f7dc42444e8fa28202901c90505b60008460020b1315610aaa57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610aa657fe5b0490505b60006401000000008281610aba57fe5b0614610ac7576001610aca565b60005b60ff16602082901c019250505091905056fea26469706673582212200799427a2d9fbccf084221a4de7070d99298aaa6853191b6339966ae310a6d2364736f6c63430007060033";

export class TickMathTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickMathTest> {
    return super.deploy(overrides || {}) as Promise<TickMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickMathTest {
    return super.attach(address) as TickMathTest;
  }
  connect(signer: Signer): TickMathTest__factory {
    return super.connect(signer) as TickMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickMathTestInterface {
    return new utils.Interface(_abi) as TickMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickMathTest {
    return new Contract(address, _abi, signerOrProvider) as TickMathTest;
  }
}
