/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TickBitmapTest,
  TickBitmapTestInterface,
} from "../TickBitmapTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int16",
        name: "",
        type: "int16",
      },
    ],
    name: "bitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "flipTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getGasCostOfFlipTick",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "lte",
        type: "bool",
      },
    ],
    name: "getGasCostOfNextInitializedTickWithinOneWord",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "lte",
        type: "bool",
      },
    ],
    name: "nextInitializedTickWithinOneWord",
    outputs: [
      {
        internalType: "int24",
        name: "next",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610731806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632bdc2fd3146100675780633e7ba228146100ae5780633ffc81ee1461010b5780638815912f14610150578063f04bc94314610181578063f0fc9224146101c6575b600080fd5b6100966004803603602081101561007d57600080fd5b81019080803560020b9060200190929190505050610217565b60405180821515815260200191505060405180910390f35b6100e9600480360360408110156100c457600080fd5b81019080803560020b9060200190929190803515159060200190929190505050610258565b604051808360020b815260200182151581526020019250505060405180910390f35b61013a6004803603602081101561012157600080fd5b81019080803560010b906020019092919050505061027f565b6040518082815260200191505060405180910390f35b61017f6004803603602081101561016657600080fd5b81019080803560020b9060200190929190505050610297565b005b6101b06004803603602081101561019757600080fd5b81019080803560020b90602001909291905050506102b1565b6040518082815260200191505060405180910390f35b610201600480360360408110156101dc57600080fd5b81019080803560020b90602001909291908035151590602001909291905050506102d9565b6040518082815260200191505060405180910390f35b6000806000610235846001806000610306909392919063ffffffff16565b915091508360020b8260020b1461024d57600061024f565b805b92505050919050565b600080610274846001856000610306909392919063ffffffff16565b915091509250929050565b60006020528060005260406000206000915090505481565b6102ae816001600061045e9092919063ffffffff16565b50565b6000805a90506102ce836001600061045e9092919063ffffffff16565b5a8103915050919050565b6000805a90506102f8846001856000610306909392919063ffffffff16565b50505a810391505092915050565b60008060008460020b8660020b8161031a57fe5b05905060008660020b128015610343575060008560020b8760020b8161033c57fe5b0760020b14155b15610352578080600190039150505b83156103d657600080610364836104d6565b9150915060008160ff166001901b60018360ff166001901b030190506000818b60008660010b60010b81526020019081526020016000205416905060008114159550856103b857888360ff168603026103cb565b886103c2826104f9565b840360ff168603025b965050505050610454565b6000806103e5600184016104d6565b91509150600060018260ff166001901b031990506000818b60008660010b60010b815260200190815260200160002054169050600081141595508561043757888360ff0360ff1660018701010261044d565b8883610442836105d4565b0360ff166001870101025b9650505050505b5094509492505050565b60008160020b8360020b8161046f57fe5b0760020b1461047d57600080fd5b6000806104988360020b8560020b8161049257fe5b056104d6565b9150915060008160ff166001901b9050808660008560010b60010b815260200190815260200160002060008282541892505081905550505050505050565b60008060088360020b901d91506101008360020b816104f157fe5b079050915091565b600080821161050757600080fd5b700100000000000000000000000000000000821061052d57608082901c91506080810190505b68010000000000000000821061054b57604082901c91506040810190505b640100000000821061056557602082901c91506020810190505b62010000821061057d57601082901c91506010810190505b610100821061059457600882901c91506008810190505b601082106105aa57600482901c91506004810190505b600482106105c057600282901c91506002810190505b600282106105cf576001810190505b919050565b60008082116105e257600080fd5b60ff905060006fffffffffffffffffffffffffffffffff80168316111561060e57608081039050610616565b608082901c91505b600067ffffffffffffffff8016831611156106365760408103905061063e565b604082901c91505b600063ffffffff80168316111561065a57602081039050610662565b602082901c91505b600061ffff80168316111561067c57601081039050610684565b601082901c91505b600060ff80168316111561069d576008810390506106a5565b600882901c91505b6000600f831611156106bc576004810390506106c4565b600482901c91505b60006003831611156106db576002810390506106e3565b600282901c91505b60006001831611156106f6576001810390505b91905056fea264697066735822122082034afde996b2310050bcb1e699f97c3b7ef62ad4ea3d6b4bc8ab5cf2b85dfb64736f6c63430007060033";

export class TickBitmapTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickBitmapTest> {
    return super.deploy(overrides || {}) as Promise<TickBitmapTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickBitmapTest {
    return super.attach(address) as TickBitmapTest;
  }
  connect(signer: Signer): TickBitmapTest__factory {
    return super.connect(signer) as TickBitmapTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickBitmapTestInterface {
    return new utils.Interface(_abi) as TickBitmapTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickBitmapTest {
    return new Contract(address, _abi, signerOrProvider) as TickBitmapTest;
  }
}
