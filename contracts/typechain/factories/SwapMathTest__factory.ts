/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SwapMathTest, SwapMathTestInterface } from "../SwapMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtPTarget",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "int256",
        name: "amountRemaining",
        type: "int256",
      },
      {
        internalType: "uint24",
        name: "feePips",
        type: "uint24",
      },
    ],
    name: "computeSwapStep",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtPTarget",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "int256",
        name: "amountRemaining",
        type: "int256",
      },
      {
        internalType: "uint24",
        name: "feePips",
        type: "uint24",
      },
    ],
    name: "getGasCostOfComputeSwapStep",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c20806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063100d3f741461003b578063d28c51b714610113575b600080fd5b6100d2600480360360a081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803562ffffff1690602001909291905050506101c0565b604051808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390f35b6101aa600480360360a081101561012957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803562ffffff1690602001909291905050506101e7565b6040518082815260200191505060405180910390f35b6000806000806101d3898989898961020d565b935093509350935095509550955095915050565b6000805a90506101fa878787878761020d565b505050505a810391505095945050505050565b60008060008060008873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1610159050600080881215905080156102bc57600061026f8989620f42400362ffffff16620f4240610469565b905082610288576102838c8c8c6001610543565b610296565b6102958b8d8c600161061d565b5b95508581106102a7578a96506102b6565b6102b38c8b8386610753565b96505b50610308565b816102d3576102ce8b8b8b600061061d565b6102e1565b6102e08a8c8b6000610543565b5b93508388600003106102f557899550610307565b6103048b8a8a600003856107c5565b95505b5b60008673ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16149050821561038f5780801561034b5750815b6103615761035c878d8c600161061d565b610363565b855b9550808015610370575081155b61038657610381878d8c6000610543565b610388565b845b94506103d9565b8080156103995750815b6103af576103aa8c888c6001610543565b6103b1565b855b95508080156103be575081155b6103d4576103cf8c888c600061061d565b6103d6565b845b94505b811580156103e957508860000385115b156103f5578860000394505b81801561042e57508a73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b1561043d57858903935061045a565b610457868962ffffff168a620f42400362ffffff16610837565b93505b50505095509550955095915050565b6000806000801985870985870292508281108382030391505060008114156104a4576000841161049857600080fd5b8382049250505061053c565b8084116104b057600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16111561058457838580955081965050505b816105d0576105cb836fffffffffffffffffffffffffffffffff1686860373ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000610469565b610613565b610612836fffffffffffffffffffffffffffffffff1686860373ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000610837565b5b9050949350505050565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16111561065e57838580955081965050505b6000606060ff16846fffffffffffffffffffffffffffffffff16901b9050600086860373ffffffffffffffffffffffffffffffffffffffff16905060008773ffffffffffffffffffffffffffffffffffffffff16116106bc57600080fd5b83610706578673ffffffffffffffffffffffffffffffffffffffff166106f983838973ffffffffffffffffffffffffffffffffffffffff16610469565b8161070057fe5b04610747565b61074661072a83838973ffffffffffffffffffffffffffffffffffffffff16610837565b8873ffffffffffffffffffffffffffffffffffffffff16610895565b5b92505050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff161161077757600080fd5b6000846fffffffffffffffffffffffffffffffff161161079657600080fd5b816107ad576107a885858560016108a8565b6107bb565b6107ba8585856001610a1a565b5b9050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff16116107e957600080fd5b6000846fffffffffffffffffffffffffffffffff161161080857600080fd5b8161081f5761081a8585856000610a1a565b61082d565b61082c85858560006108a8565b5b9050949350505050565b6000610844848484610469565b90506000828061085057fe5b848609111561088e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811061088557600080fd5b80806001019150505b9392505050565b6000808284061182840401905092915050565b6000811561095e57600073ffffffffffffffffffffffffffffffffffffffff80168411156108ff576108fa846c01000000000000000000000000876fffffffffffffffffffffffffffffffff16610469565b610923565b846fffffffffffffffffffffffffffffffff16606060ff1685901b8161092157fe5b045b9050610956610951828873ffffffffffffffffffffffffffffffffffffffff16610ba490919063ffffffff16565b610bbe565b915050610a12565b600073ffffffffffffffffffffffffffffffffffffffff80168411156109ad576109a8846c01000000000000000000000000876fffffffffffffffffffffffffffffffff16610837565b6109d1565b6109d0606060ff1685901b866fffffffffffffffffffffffffffffffff16610895565b5b9050808673ffffffffffffffffffffffffffffffffffffffff16116109f557600080fd5b808673ffffffffffffffffffffffffffffffffffffffff16039150505b949350505050565b600080831415610a2c57849050610b9c565b6000606060ff16856fffffffffffffffffffffffffffffffff16901b90508215610b135760008673ffffffffffffffffffffffffffffffffffffffff16858873ffffffffffffffffffffffffffffffffffffffff16870292508281610a8d57fe5b041415610acf5760008183019050828110610acd57610ac3838973ffffffffffffffffffffffffffffffffffffffff1683610837565b9350505050610b9c565b505b610b0a82610b05878a73ffffffffffffffffffffffffffffffffffffffff168681610af657fe5b04610ba490919063ffffffff16565b610895565b92505050610b9c565b60008673ffffffffffffffffffffffffffffffffffffffff16858873ffffffffffffffffffffffffffffffffffffffff16870292508281610b5057fe5b04148015610b5d57508082115b610b6657600080fd5b60008183039050610b96610b91848a73ffffffffffffffffffffffffffffffffffffffff1684610837565b610bbe565b93505050505b949350505050565b6000828284019150811015610bb857600080fd5b92915050565b6000818291508173ffffffffffffffffffffffffffffffffffffffff1614610be557600080fd5b91905056fea264697066735822122096d5e7caf152ea63401ea88a7b0956cb3ffccf128cd22bf98434ae31f529979664736f6c63430007060033";

export class SwapMathTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapMathTest> {
    return super.deploy(overrides || {}) as Promise<SwapMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SwapMathTest {
    return super.attach(address) as SwapMathTest;
  }
  connect(signer: Signer): SwapMathTest__factory {
    return super.connect(signer) as SwapMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapMathTestInterface {
    return new utils.Interface(_abi) as SwapMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapMathTest {
    return new Contract(address, _abi, signerOrProvider) as SwapMathTest;
  }
}
