/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TickBitmapEchidnaTest,
  TickBitmapEchidnaTestInterface,
} from "../TickBitmapEchidnaTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "lte",
        type: "bool",
      },
    ],
    name: "checkNextInitializedTickWithinOneWordInvariants",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "flipTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610699806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632854ac0a1461003b5780638815912f14610078575b600080fd5b6100766004803603604081101561005157600080fd5b81019080803560020b90602001909291908035151590602001909291905050506100a9565b005b6100a76004803603602081101561008e57600080fd5b81019080803560020b90602001909291905050506101ef565b005b6000806100c584600185600061022d909392919063ffffffff16565b91509150821561016c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8001008460020b12156100ff57600080fd5b8360020b8260020b131561010f57fe5b61010082850360020b1261011f57fe5b60008490505b8260020b8160020b13156101515761013c81610385565b1561014357fe5b808060019003915050610125565b5080151561015e83610385565b15151461016757fe5b6101e9565b627ffeff8460020b1261017e57600080fd5b8360020b8260020b1361018d57fe5b61010084830360020b131561019e57fe5b60006001850190505b8260020b8160020b12156101d2576101be81610385565b156101c557fe5b80806001019150506101a7565b508015156101df83610385565b1515146101e857fe5b5b50505050565b60006101fa82610385565b905061021382600160006103c69092919063ffffffff16565b8015151561022083610385565b15151461022957fe5b5050565b60008060008460020b8660020b8161024157fe5b05905060008660020b12801561026a575060008560020b8760020b8161026357fe5b0760020b14155b15610279578080600190039150505b83156102fd5760008061028b8361043e565b9150915060008160ff166001901b60018360ff166001901b030190506000818b60008660010b60010b81526020019081526020016000205416905060008114159550856102df57888360ff168603026102f2565b886102e982610461565b840360ff168603025b96505050505061037b565b60008061030c6001840161043e565b91509150600060018260ff166001901b031990506000818b60008660010b60010b815260200190815260200160002054169050600081141595508561035e57888360ff0360ff16600187010102610374565b88836103698361053c565b0360ff166001870101025b9650505050505b5094509492505050565b60008060006103a384600180600061022d909392919063ffffffff16565b915091508360020b8260020b146103bb5760006103bd565b805b92505050919050565b60008160020b8360020b816103d757fe5b0760020b146103e557600080fd5b6000806104008360020b8560020b816103fa57fe5b0561043e565b9150915060008160ff166001901b9050808660008560010b60010b815260200190815260200160002060008282541892505081905550505050505050565b60008060088360020b901d91506101008360020b8161045957fe5b079050915091565b600080821161046f57600080fd5b700100000000000000000000000000000000821061049557608082901c91506080810190505b6801000000000000000082106104b357604082901c91506040810190505b64010000000082106104cd57602082901c91506020810190505b6201000082106104e557601082901c91506010810190505b61010082106104fc57600882901c91506008810190505b6010821061051257600482901c91506004810190505b6004821061052857600282901c91506002810190505b60028210610537576001810190505b919050565b600080821161054a57600080fd5b60ff905060006fffffffffffffffffffffffffffffffff8016831611156105765760808103905061057e565b608082901c91505b600067ffffffffffffffff80168316111561059e576040810390506105a6565b604082901c91505b600063ffffffff8016831611156105c2576020810390506105ca565b602082901c91505b600061ffff8016831611156105e4576010810390506105ec565b601082901c91505b600060ff8016831611156106055760088103905061060d565b600882901c91505b6000600f831611156106245760048103905061062c565b600482901c91505b60006003831611156106435760028103905061064b565b600282901c91505b600060018316111561065e576001810390505b91905056fea26469706673582212209e2f3ab4ac477df9766d586f80b59fb21c61acca57bda4d737a3b9294b63f2bf64736f6c63430007060033";

export class TickBitmapEchidnaTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickBitmapEchidnaTest> {
    return super.deploy(overrides || {}) as Promise<TickBitmapEchidnaTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickBitmapEchidnaTest {
    return super.attach(address) as TickBitmapEchidnaTest;
  }
  connect(signer: Signer): TickBitmapEchidnaTest__factory {
    return super.connect(signer) as TickBitmapEchidnaTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickBitmapEchidnaTestInterface {
    return new utils.Interface(_abi) as TickBitmapEchidnaTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickBitmapEchidnaTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TickBitmapEchidnaTest;
  }
}
