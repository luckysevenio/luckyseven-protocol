/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SqrtPriceMathEchidnaTest,
  SqrtPriceMathEchidnaTestInterface,
} from "../SqrtPriceMathEchidnaTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "getAmount0DeltaEquivalency",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    name: "getAmount0DeltaInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getAmount0DeltaSignedInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    name: "getAmount1DeltaInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getAmount1DeltaSignedInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtLower",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtCurrent",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtUpper",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getInRangeMintInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "add",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromAmount0RoundingUpInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "add",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromAmount1RoundingDownInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromInputInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromOutputInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtA",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtB",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getOutOfRangeMintInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    name: "mulDivRoundingUpInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506119b8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638e13a4b9116100715780638e13a4b914610369578063b29f199e146103f5578063b46e671414610466578063b712c47c146104dc578063c8569d881461054d578063f157fb50146105cd576100b4565b80631faf4a39146100b957806321e14f8b1461012f5780633001e65e146101a557806339933d51146102255780633d729147146102b65780636e6238d7146102f8575b600080fd5b61012d600480360360808110156100cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050610643565b005b6101a36004803603608081101561014557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035151590602001909291905050506106fe565b005b610223600480360360608110156101bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff16906020019092919050505061080e565b005b6102b46004803603608081101561023b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600f0b90602001909291905050506108bc565b005b6102f6600480360360608110156102cc57600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506109d3565b005b6103676004803603606081101561030e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600f0b9060200190929190505050610a54565b005b6103f36004803603608081101561037f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610b38565b005b6104646004803603606081101561040b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600f0b9060200190929190505050610cdc565b005b6104da6004803603608081101561047c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050610dc0565b005b61054b600480360360608110156104f257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600f0b9060200190929190505050610ed0565b005b6105cb6004803603606081101561056357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190505050610fac565b005b610641600480360360808110156105e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080351515906020019092919050505061105a565b005b600061065185858585611135565b905081156106aa578473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16111561068f57fe5b61069c81868660016111a7565b8310156106a557fe5b6106f7565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1610156106e057fe5b6106ed85828660016112dd565b8310156106f657fe5b5b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff161161072157600080fd5b6000836fffffffffffffffffffffffffffffffff161161074057600080fd5b600061074e858585856113b7565b90508115610791578473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16101561078c57fe5b6107c8565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611156107c757fe5b5b6000831415610807578073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461080657fe5b5b5050505050565b60008373ffffffffffffffffffffffffffffffffffffffff1611801561084a575060008273ffffffffffffffffffffffffffffffffffffffff16115b61085357600080fd5b600061086283858460006111a7565b905061087184848460006111a7565b811461087957fe5b600061088884868560016111a7565b905061089785858560016111a7565b811461089f57fe5b808211156108a957fe5b6002828203106108b557fe5b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff16116108df57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061091757600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115801561097f57508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1611155b61098857600080fd5b600081600f0b1361099857600080fd5b60006109a5848484611529565b905060006109b4868685611574565b905060008213806109c55750600081135b6109cb57fe5b505050505050565b600081116109e057600080fd5b60006109ed8484846115bf565b905060006109fc858585611699565b905081811015610a0857fe5b600282820310610a1457fe5b60018282031415610a385760008380610a2957fe5b85870911610a3357fe5b610a4d565b60008380610a4257fe5b85870914610a4c57fe5b5b5050505050565b60008373ffffffffffffffffffffffffffffffffffffffff16118015610a90575060008273ffffffffffffffffffffffffffffffffffffffff16115b610a9957600080fd5b6000610aa6848484611574565b9050600082600f0b1215610ac0576000811315610abf57fe5b5b600082600f0b1315610b1b578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610b0f5760008114610b0a57fe5b610b1a565b60008113610b1957fe5b5b5b600082600f0b1415610b325760008114610b3157fe5b5b50505050565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161015610b7157600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff16118015610bad575060008373ffffffffffffffffffffffffffffffffffffffff16115b610bb657600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1684860273ffffffffffffffffffffffffffffffffffffffff1681610c0457fe5b0473ffffffffffffffffffffffffffffffffffffffff1614610c2557600080fd5b6000606060ff16836fffffffffffffffffffffffffffffffff16901b9050600084860373ffffffffffffffffffffffffffffffffffffffff16905060008573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16029050600084610caa57610ca58484846115bf565b610cb6565b610cb5848484611699565b5b90506000610cc6888a89896111a7565b9050808214610cd157fe5b505050505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff16118015610d18575060008273ffffffffffffffffffffffffffffffffffffffff16115b610d2157600080fd5b6000610d2e838584611529565b9050600082600f0b1215610d48576000811315610d4757fe5b5b600082600f0b1315610da3578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610d975760008114610d9257fe5b610da2565b60008113610da157fe5b5b5b600082600f0b1415610dba5760008114610db957fe5b5b50505050565b60008473ffffffffffffffffffffffffffffffffffffffff1611610de357600080fd5b6000836fffffffffffffffffffffffffffffffff1611610e0257600080fd5b6000610e10858585856116f7565b90508115610e53578473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161115610e4e57fe5b610e8a565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015610e8957fe5b5b6000831415610ec9578073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610ec857fe5b5b5050505050565b60008373ffffffffffffffffffffffffffffffffffffffff16118015610f0c575060008273ffffffffffffffffffffffffffffffffffffffff16115b610f1557600080fd5b600081600f0b13610f2557600080fd5b6000610f32848484611529565b90506000610f41858585611574565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610f905760008214610f8157fe5b60008114610f8b57fe5b610fa5565b60008213610f9a57fe5b60008113610fa457fe5b5b5050505050565b60008373ffffffffffffffffffffffffffffffffffffffff16118015610fe8575060008273ffffffffffffffffffffffffffffffffffffffff16115b610ff157600080fd5b600061100084848460006112dd565b905061100f83858460006112dd565b811461101757fe5b600061102685858560016112dd565b905061103584868560016112dd565b811461103d57fe5b8082111561104757fe5b60028282031061105357fe5b5050505050565b600061106885858585611881565b905081156110c1578473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611156110a657fe5b6110b381868660006112dd565b8311156110bc57fe5b61112e565b60008173ffffffffffffffffffffffffffffffffffffffff16116110e157fe5b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16101561111757fe5b61112485828660006111a7565b83111561112d57fe5b5b5050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff161161115957600080fd5b6000846fffffffffffffffffffffffffffffffff161161117857600080fd5b8161118f5761118a85858560016113b7565b61119d565b61119c85858560016116f7565b5b9050949350505050565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1611156111e857838580955081965050505b6000606060ff16846fffffffffffffffffffffffffffffffff16901b9050600086860373ffffffffffffffffffffffffffffffffffffffff16905060008773ffffffffffffffffffffffffffffffffffffffff161161124657600080fd5b83611290578673ffffffffffffffffffffffffffffffffffffffff1661128383838973ffffffffffffffffffffffffffffffffffffffff166115bf565b8161128a57fe5b046112d1565b6112d06112b483838973ffffffffffffffffffffffffffffffffffffffff16611699565b8873ffffffffffffffffffffffffffffffffffffffff166118f3565b5b92505050949350505050565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16111561131e57838580955081965050505b8161136a57611365836fffffffffffffffffffffffffffffffff1686860373ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000006115bf565b6113ad565b6113ac836fffffffffffffffffffffffffffffffff1686860373ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000611699565b5b9050949350505050565b6000811561146d57600073ffffffffffffffffffffffffffffffffffffffff801684111561140e57611409846c01000000000000000000000000876fffffffffffffffffffffffffffffffff166115bf565b611432565b846fffffffffffffffffffffffffffffffff16606060ff1685901b8161143057fe5b045b9050611465611460828873ffffffffffffffffffffffffffffffffffffffff1661190690919063ffffffff16565b611920565b915050611521565b600073ffffffffffffffffffffffffffffffffffffffff80168411156114bc576114b7846c01000000000000000000000000876fffffffffffffffffffffffffffffffff16611699565b6114e0565b6114df606060ff1685901b866fffffffffffffffffffffffffffffffff166118f3565b5b9050808673ffffffffffffffffffffffffffffffffffffffff161161150457600080fd5b808673ffffffffffffffffffffffffffffffffffffffff16039150505b949350505050565b60008082600f0b1261154f5761154a61154585858560016111a7565b61194c565b61156b565b61156761156285858560000360006111a7565b61194c565b6000035b90509392505050565b60008082600f0b1261159a5761159561159085858560016112dd565b61194c565b6115b6565b6115b26115ad85858560000360006112dd565b61194c565b6000035b90509392505050565b6000806000801985870985870292508281108382030391505060008114156115fa57600084116115ee57600080fd5b83820492505050611692565b80841161160657600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b60006116a68484846115bf565b9050600082806116b257fe5b84860911156116f0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81106116e757600080fd5b80806001019150505b9392505050565b60008083141561170957849050611879565b6000606060ff16856fffffffffffffffffffffffffffffffff16901b905082156117f05760008673ffffffffffffffffffffffffffffffffffffffff16858873ffffffffffffffffffffffffffffffffffffffff1687029250828161176a57fe5b0414156117ac57600081830190508281106117aa576117a0838973ffffffffffffffffffffffffffffffffffffffff1683611699565b9350505050611879565b505b6117e7826117e2878a73ffffffffffffffffffffffffffffffffffffffff1686816117d357fe5b0461190690919063ffffffff16565b6118f3565b92505050611879565b60008673ffffffffffffffffffffffffffffffffffffffff16858873ffffffffffffffffffffffffffffffffffffffff1687029250828161182d57fe5b0414801561183a57508082115b61184357600080fd5b6000818303905061187361186e848a73ffffffffffffffffffffffffffffffffffffffff1684611699565b611920565b93505050505b949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff16116118a557600080fd5b6000846fffffffffffffffffffffffffffffffff16116118c457600080fd5b816118db576118d685858560006116f7565b6118e9565b6118e885858560006113b7565b5b9050949350505050565b6000808284061182840401905092915050565b600082828401915081101561191a57600080fd5b92915050565b6000818291508173ffffffffffffffffffffffffffffffffffffffff161461194757600080fd5b919050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061197a57600080fd5b81905091905056fea26469706673582212207663d6c828a09216bff84dfd7228729a55b5a13595a485ea35e9e91cdb1ff84b64736f6c63430007060033";

export class SqrtPriceMathEchidnaTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SqrtPriceMathEchidnaTest> {
    return super.deploy(overrides || {}) as Promise<SqrtPriceMathEchidnaTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SqrtPriceMathEchidnaTest {
    return super.attach(address) as SqrtPriceMathEchidnaTest;
  }
  connect(signer: Signer): SqrtPriceMathEchidnaTest__factory {
    return super.connect(signer) as SqrtPriceMathEchidnaTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SqrtPriceMathEchidnaTestInterface {
    return new utils.Interface(_abi) as SqrtPriceMathEchidnaTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SqrtPriceMathEchidnaTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SqrtPriceMathEchidnaTest;
  }
}
