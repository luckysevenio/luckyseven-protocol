/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestUniswapV3Router,
  TestUniswapV3RouterInterface,
} from "../TestUniswapV3Router";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "int256",
        name: "amount0Delta",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "amount1Delta",
        type: "int256",
      },
    ],
    name: "SwapCallback",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "poolInput",
        type: "address",
      },
      {
        internalType: "address",
        name: "poolOutput",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0Out",
        type: "uint256",
      },
    ],
    name: "swapForExact0Multi",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "poolInput",
        type: "address",
      },
      {
        internalType: "address",
        name: "poolOutput",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount1Out",
        type: "uint256",
      },
    ],
    name: "swapForExact1Multi",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f6d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063c35a2b6814610046578063c96aa6c7146100d4578063fa461e3314610162575b600080fd5b6100d26004803603608081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506101ef565b005b610160600480360360808110156100ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610468565b005b6101ed6004803603606081101561017857600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156101a957600080fd5b8201836020820111156101bb57600080fd5b803590602001918460018302840111640100000000831117156101dd57600080fd5b90919293919293905050506106f0565b005b6000600167ffffffffffffffff8111801561020957600080fd5b506040519080825280602002602001820160405280156102385781602001602082028036833780820191505090505b509050838160008151811061024957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663128acb088660016102ab86610f01565b60000360016401000276a301863360405160200180806020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b8381101561031b578082015181840152602081019050610300565b5050505090500193505050506040516020818303038152906040526040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff16815260200185151581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156103cb5780820151818401526020810190506103b0565b50505050905090810190601f1680156103f85780820380516001836020036101000a031916815260200191505b5096505050505050506040805180830381600087803b15801561041a57600080fd5b505af115801561042e573d6000803e3d6000fd5b505050506040513d604081101561044457600080fd5b81019080805190602001909291908051906020019092919050505050505050505050565b6000600167ffffffffffffffff8111801561048257600080fd5b506040519080825280602002602001820160405280156104b15781602001602082028036833780820191505090505b50905083816000815181106104c257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663128acb0886600061052486610f01565b600003600173fffd8963efd1fc6a506488495d951d5263988d2603863360405160200180806020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b838110156105a3578082015181840152602081019050610588565b5050505090500193505050506040516020818303038152906040526040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff16815260200185151581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610653578082015181840152602081019050610638565b50505050905090810190601f1680156106805780820380516001836020036101000a031916815260200191505b5096505050505050506040805180830381600087803b1580156106a257600080fd5b505af11580156106b6573d6000803e3d6000fd5b505050506040513d60408110156106cc57600080fd5b81019080805190602001909291908051906020019092919050505050505050505050565b7fd48241df4a75e663b29e55f9506b31f77ed0f48cfe7e7612d1163144995dc1ca8484604051808381526020018281526020019250505060405180910390a16000808383604081101561074257600080fd5b810190808035906020019064010000000081111561075f57600080fd5b82018360208201111561077157600080fd5b8035906020019184602083028401116401000000008311171561079357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505091509150600182511415610c5357600080871361089a573373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d602081101561088457600080fd5b810190808051906020019092919050505061091c565b3373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d602081101561090a57600080fd5b81019080805190602001909291905050505b9050600080881361092d578661092f565b875b905060008460008151811061094057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561098d57600080fd5b505afa1580156109a1573d6000803e3d6000fd5b505050506040513d60208110156109b757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614905084600081518110610a0557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663128acb0833838560000385610a5057600173fffd8963efd1fc6a506488495d951d5263988d2603610a5a565b60016401000276a3015b600067ffffffffffffffff81118015610a7257600080fd5b50604051908082528060200260200182016040528015610aa15781602001602082028036833780820191505090505b508a60405160200180806020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b83811015610b05578082015181840152602081019050610aea565b5050505090500193505050506040516020818303038152906040526040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff16815260200185151581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610bb5578082015181840152602081019050610b9a565b50505050905090810190601f168015610be25780820380516001836020036101000a031916815260200191505b5096505050505050506040805180830381600087803b158015610c0457600080fd5b505af1158015610c18573d6000803e3d6000fd5b505050506040513d6040811015610c2e57600080fd5b8101908080519060200190929190805190602001909291905050505050505050610ef9565b6000861315610dac573373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca257600080fd5b505afa158015610cb6573d6000803e3d6000fd5b505050506040513d6020811015610ccc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166323b872dd8233896040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610d6b57600080fd5b505af1158015610d7f573d6000803e3d6000fd5b505050506040513d6020811015610d9557600080fd5b810190808051906020019092919050505050610ef8565b3373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610df257600080fd5b505afa158015610e06573d6000803e3d6000fd5b505050506040513d6020811015610e1c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166323b872dd8233886040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610ebb57600080fd5b505af1158015610ecf573d6000803e3d6000fd5b505050506040513d6020811015610ee557600080fd5b8101908080519060200190929190505050505b5b505050505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210610f2f57600080fd5b81905091905056fea2646970667358221220605114c91def79781a9ff7501a2b385c539a3b2873f8e3761e93f03f07b0f95b64736f6c63430007060033";

export class TestUniswapV3Router__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestUniswapV3Router> {
    return super.deploy(overrides || {}) as Promise<TestUniswapV3Router>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestUniswapV3Router {
    return super.attach(address) as TestUniswapV3Router;
  }
  connect(signer: Signer): TestUniswapV3Router__factory {
    return super.connect(signer) as TestUniswapV3Router__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUniswapV3RouterInterface {
    return new utils.Interface(_abi) as TestUniswapV3RouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUniswapV3Router {
    return new Contract(address, _abi, signerOrProvider) as TestUniswapV3Router;
  }
}
