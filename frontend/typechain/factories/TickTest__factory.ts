/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TickTest, TickTestInterface } from "../TickTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "clear",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulativeX128",
        type: "uint160",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint32",
        name: "time",
        type: "uint32",
      },
    ],
    name: "cross",
    outputs: [
      {
        internalType: "int128",
        name: "liquidityNet",
        type: "int128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickCurrent",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
    ],
    name: "getFeeGrowthInside",
    outputs: [
      {
        internalType: "uint256",
        name: "feeGrowthInside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthInside1X128",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside0X128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside1X128",
            type: "uint256",
          },
          {
            internalType: "int56",
            name: "tickCumulativeOutside",
            type: "int56",
          },
          {
            internalType: "uint160",
            name: "secondsPerLiquidityOutsideX128",
            type: "uint160",
          },
          {
            internalType: "uint32",
            name: "secondsOutside",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "initialized",
            type: "bool",
          },
        ],
        internalType: "struct Tick.Info",
        name: "info",
        type: "tuple",
      },
    ],
    name: "setTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24",
      },
    ],
    name: "tickSpacingToMaxLiquidityPerTick",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    name: "ticks",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidityGross",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "liquidityNet",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside1X128",
        type: "uint256",
      },
      {
        internalType: "int56",
        name: "tickCumulativeOutside",
        type: "int56",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityOutsideX128",
        type: "uint160",
      },
      {
        internalType: "uint32",
        name: "secondsOutside",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickCurrent",
        type: "int24",
      },
      {
        internalType: "int128",
        name: "liquidityDelta",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulativeX128",
        type: "uint160",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint32",
        name: "time",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "upper",
        type: "bool",
      },
      {
        internalType: "uint128",
        name: "maxLiquidity",
        type: "uint128",
      },
    ],
    name: "update",
    outputs: [
      {
        internalType: "bool",
        name: "flipped",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506113a6806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806382c66f871161005b57806382c66f87146100ff578063b613524a1461012f578063df33fa881461014b578063f30dba931461017b5761007d565b806320b90da91461008257806330e3ff4c146100b25780635cb083ce146100e3575b600080fd5b61009c60048036038101906100979190610e83565b6101b2565b6040516100a99190611104565b60405180910390f35b6100cc60048036038101906100c79190610f5e565b6101ea565b6040516100da9291906111d3565b60405180910390f35b6100fd60048036038101906100f89190610fd5565b610217565b005b61011960048036038101906101149190610e5a565b61038a565b604051610126919061113a565b60405180910390f35b61014960048036038101906101449190610e5a565b61039c565b005b61016560048036038101906101609190611012565b6103b3565b604051610172919061111f565b60405180910390f35b61019560048036038101906101909190610e5a565b6103df565b6040516101a9989796959493929190611155565b60405180910390f35b60006101da8b8b8b8b8b8b8b8b8b8b600061049a909a9998979695949392919063ffffffff16565b90509a9950505050505050505050565b6000806102098787878787600061079c9095949392919063ffffffff16565b915091509550959350505050565b806000808460020b60020b815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff160217905550604082015181600101556060820151816002015560808201518160030160006101000a81548166ffffffffffffff021916908360060b66ffffffffffffff16021790555060a08201518160030160076101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c082015181600301601b6101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600301601f6101000a81548160ff0219169083151502179055509050505050565b600061039582610863565b9050919050565b6103b081600061091790919063ffffffff16565b50565b60006103d387878787878760006109f8909695949392919063ffffffff16565b90509695505050505050565b60006020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a9004600f0b908060010154908060020154908060030160009054906101000a900460060b908060030160079054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600301601b9054906101000a900463ffffffff169080600301601f9054906101000a900460ff16905088565b6000808c60008d60020b60020b8152602001908152602001600020905060008160000160009054906101000a90046fffffffffffffffffffffffffffffffff16905060006104e8828d610b34565b9050846fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161115610584576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f4c4f00000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000826fffffffffffffffffffffffffffffffff161415156000826fffffffffffffffffffffffffffffffff16141515141593506000826fffffffffffffffffffffffffffffffff1614156106a3578c60020b8e60020b13610685578a8360010181905550898360020181905550888360030160076101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550878360030160006101000a81548166ffffffffffffff021916908360060b66ffffffffffffff1602179055508683600301601b6101000a81548163ffffffff021916908363ffffffff1602179055505b600183600301601f6101000a81548160ff0219169083151502179055505b808360000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508561071a576107156107108d600f0b8560000160109054906101000a9004600f0b600f0b610c8d90919063ffffffff16565b610cb0565b61074d565b61074c6107478d600f0b8560000160109054906101000a9004600f0b600f0b610cc990919063ffffffff16565b610cb0565b5b8360000160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff1602179055505050509b9a5050505050505050505050565b60008060008860008960020b60020b8152602001908152602001600020905060008960008960020b60020b815260200190815260200160002090506000808a60020b8960020b126107fa57836001015491508360020154905061080d565b8360010154880391508360020154870390505b6000808b60020b8b60020b1215610831578460010154915084600201549050610844565b84600101548a0391508460020154890390505b81848b0303975080838a03039650505050505050965096945050505050565b600080828360020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860020b8161089657fe5b050290506000838460020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b816108cf57fe5b05029050600060018560020b84840360020b816108e857fe5b050190508062ffffff166fffffffffffffffffffffffffffffffff80168161090c57fe5b049350505050919050565b8160008260020b60020b8152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549066ffffffffffffff02191690556003820160076101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201601b6101000a81549063ffffffff021916905560038201601f6101000a81549060ff021916905550505050565b6000808860008960020b60020b815260200190815260200160002090508060010154870381600101819055508060020154860381600201819055508060030160079054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685038160030160076101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060030160009054906101000a900460060b84038160030160006101000a81548166ffffffffffffff021916908360060b66ffffffffffffff16021790555080600301601b9054906101000a900463ffffffff16830381600301601b6101000a81548163ffffffff021916908363ffffffff1602179055508060000160109054906101000a9004600f0b915050979650505050505050565b60008082600f0b1215610be757826fffffffffffffffffffffffffffffffff168260000384039150816fffffffffffffffffffffffffffffffff1610610be2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f4c5300000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610c87565b826fffffffffffffffffffffffffffffffff168284019150816fffffffffffffffffffffffffffffffff161015610c86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f4c4100000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b92915050565b6000808212151515838385019250821215151514610caa57600080fd5b92915050565b60008182915081600f0b14610cc457600080fd5b919050565b6000808212151515838385039250821315151514610ce657600080fd5b92915050565b600081359050610cfb816112b8565b92915050565b600081359050610d10816112cf565b92915050565b600081359050610d25816112e6565b92915050565b600081359050610d3a816112fd565b92915050565b60006101008284031215610d5357600080fd5b610d5e6101006111fc565b90506000610d6e84828501610e06565b6000830152506020610d8284828501610d01565b6020830152506040610d9684828501610e30565b6040830152506060610daa84828501610e30565b6060830152506080610dbe84828501610d2b565b60808301525060a0610dd284828501610e1b565b60a08301525060c0610de684828501610e45565b60c08301525060e0610dfa84828501610cec565b60e08301525092915050565b600081359050610e1581611314565b92915050565b600081359050610e2a8161132b565b92915050565b600081359050610e3f81611342565b92915050565b600081359050610e5481611359565b92915050565b600060208284031215610e6c57600080fd5b6000610e7a84828501610d16565b91505092915050565b6000806000806000806000806000806101408b8d031215610ea357600080fd5b6000610eb18d828e01610d16565b9a50506020610ec28d828e01610d16565b9950506040610ed38d828e01610d01565b9850506060610ee48d828e01610e30565b9750506080610ef58d828e01610e30565b96505060a0610f068d828e01610e1b565b95505060c0610f178d828e01610d2b565b94505060e0610f288d828e01610e45565b935050610100610f3a8d828e01610cec565b925050610120610f4c8d828e01610e06565b9150509295989b9194979a5092959850565b600080600080600060a08688031215610f7657600080fd5b6000610f8488828901610d16565b9550506020610f9588828901610d16565b9450506040610fa688828901610d16565b9350506060610fb788828901610e30565b9250506080610fc888828901610e30565b9150509295509295909350565b6000806101208385031215610fe957600080fd5b6000610ff785828601610d16565b925050602061100885828601610d40565b9150509250929050565b60008060008060008060c0878903121561102b57600080fd5b600061103989828a01610d16565b965050602061104a89828a01610e30565b955050604061105b89828a01610e30565b945050606061106c89828a01610e1b565b935050608061107d89828a01610d2b565b92505060a061108e89828a01610e45565b9150509295509295509295565b6110a48161122d565b82525050565b6110b381611239565b82525050565b6110c281611253565b82525050565b6110d181611260565b82525050565b6110e08161127c565b82525050565b6110ef8161129c565b82525050565b6110fe816112a6565b82525050565b6000602082019050611119600083018461109b565b92915050565b600060208201905061113460008301846110aa565b92915050565b600060208201905061114f60008301846110c8565b92915050565b60006101008201905061116b600083018b6110c8565b611178602083018a6110aa565b61118560408301896110e6565b61119260608301886110e6565b61119f60808301876110b9565b6111ac60a08301866110d7565b6111b960c08301856110f5565b6111c660e083018461109b565b9998505050505050505050565b60006040820190506111e860008301856110e6565b6111f560208301846110e6565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715611223576112226112b6565b5b8060405250919050565b60008115159050919050565b600081600f0b9050919050565b60008160020b9050919050565b60008160060b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565bfe5b6112c18161122d565b81146112cc57600080fd5b50565b6112d881611239565b81146112e357600080fd5b50565b6112ef81611246565b81146112fa57600080fd5b50565b61130681611253565b811461131157600080fd5b50565b61131d81611260565b811461132857600080fd5b50565b6113348161127c565b811461133f57600080fd5b50565b61134b8161129c565b811461135657600080fd5b50565b611362816112a6565b811461136d57600080fd5b5056fea26469706673582212209b6cce6f9c2c89732627211d054cec982200a4ba30d3dfc1b22dda56f2149cc564736f6c63430007060033";

export class TickTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickTest> {
    return super.deploy(overrides || {}) as Promise<TickTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickTest {
    return super.attach(address) as TickTest;
  }
  connect(signer: Signer): TickTest__factory {
    return super.connect(signer) as TickTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickTestInterface {
    return new utils.Interface(_abi) as TickTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickTest {
    return new Contract(address, _abi, signerOrProvider) as TickTest;
  }
}
