/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LiquidityMathTest,
  LiquidityMathTestInterface,
} from "../LiquidityMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint128",
        name: "x",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "y",
        type: "int128",
      },
    ],
    name: "addDelta",
    outputs: [
      {
        internalType: "uint128",
        name: "z",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "x",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "y",
        type: "int128",
      },
    ],
    name: "getGasCostOfAddDelta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063402d44fb1461003b578063cf41632f146100ae575b600080fd5b6100866004803603604081101561005157600080fd5b8101908080356fffffffffffffffffffffffffffffffff1690602001909291908035600f0b906020019092919050505061010f565b60405180826fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100f9600480360360408110156100c457600080fd5b8101908080356fffffffffffffffffffffffffffffffff1690602001909291908035600f0b9060200190929190505050610123565b6040518082815260200191505060405180910390f35b600061011b8383610140565b905092915050565b6000805a90506101338484610140565b505a810391505092915050565b60008082600f0b12156101f357826fffffffffffffffffffffffffffffffff168260000384039150816fffffffffffffffffffffffffffffffff16106101ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f4c5300000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610293565b826fffffffffffffffffffffffffffffffff168284019150816fffffffffffffffffffffffffffffffff161015610292576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f4c4100000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b9291505056fea264697066735822122070158c211813e41a3628fe35ea076af257ba4f1b870def0edc4027731a2a973664736f6c63430007060033";

export class LiquidityMathTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityMathTest> {
    return super.deploy(overrides || {}) as Promise<LiquidityMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LiquidityMathTest {
    return super.attach(address) as LiquidityMathTest;
  }
  connect(signer: Signer): LiquidityMathTest__factory {
    return super.connect(signer) as LiquidityMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityMathTestInterface {
    return new utils.Interface(_abi) as LiquidityMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityMathTest {
    return new Contract(address, _abi, signerOrProvider) as LiquidityMathTest;
  }
}
